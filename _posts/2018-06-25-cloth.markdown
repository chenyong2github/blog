---
layout:     post
title:      "PBR Cloth&Fabric"
date:       2018-06-25
author:     "ChenYong"
header-img: "img/post-bg-fabric.jpg"
tags:
    - Unity
    - PBR
    - Fabric
    - 原创
---

### 物理性质

现实中的布料织物大概可分为表面粗糙和光滑两类。表面粗糙的织物有棉布、亚麻布等；表面光滑的织物有丝绸、天鹅绒等。

观察发现棉布类织物纤维周围有一圈很细的绒毛，丝绸类织物的纤维绒毛很少。棉布类织物高光颜色一般为较淡的织物颜色，
丝绸类织物会有更丰富的高光颜色。
![这里写图片描述](/img/in-post/fabric/2.png)
<center>现实织物的物理表现</center>
这些物理特性表面部分适合用PBR的metalic和Rougthness来描述，绒毛和高光部分需增加一个Fabric Scatter模型来描述，详细见下文。
![这里写图片描述](/img/in-post/fabric/1.png)
<center>模拟织物的PBR参数</center>


### Microfiber Model

#### Inverted Gaussian
布料织物有其特有的光照反射模型。以天鹅绒为例，它的高光位置不是灯光和视线的正对区域，而是边缘位置。
![这里写图片描述](/img/in-post/fabric/3.jpg)
<center>Microfacet反射与实际织物的反射对比</center>

标准PBR的Microfacet GGX分布在0角度下（法线、灯光和视线同向）获得最大的高光强度，然后随着角度的增大做正太（Gaussian）分布，
而天鹅绒高光分布与GGX刚好相反，可见GGX的分布模型并不适合某些布料的模拟。

*The Order:1886* 游戏采用Inverted Gaussian模型做为布料的高光分布模型，参考文献1的作者在此基础上进一步简化得到：
![这里写图片描述](/img/in-post/fabric/4.jpg)
<center>GGX分布曲线与自定义分布曲线对比</center>

shader代码：
```
inline float FabricD (float NdotH, float roughness)
{
    return 0.96 * pow(1 - NdotH, 2) + 0.057; 
}
```

用FabricD替换掉UnityStandardBRDF.cginc的BRDF1_Unity_PBS函数的GGXTerm。

![这里写图片描述](/img/in-post/fabric/6.jpg)
<center>roughness为1时GGX高光与自定义高光结果对比</center>

#### Fabric Scatter
布料织物的绒毛效果可由边缘光来模拟，再综合丝绸的高光颜色，参考文献1的作者给出一个Fabric Scatter**经验**模型：<br />
1.修改标准PBR的Fresnel term，用4倍pow值代替标准的5倍pow值，用于增大Fresnel的范围；<br />
2.再叠加一层跟视角相关的范围更大的，可调的Fresnel颜色用于模拟丝绸的多层高光；<br />
3.去掉标准PBR的间接光反射，使得metallic-like的布料不那么metallic。

shader代码：
```
inline half FabricScatterFresnelLerp(half nv, half scale)
{
    half t0 = Pow4 (1 - nv); 
    half t1 = 0.4 * (1 - nv);
    return (t1 - t0) * scale + t0;
}
```

BRDF1_Unity_PBS函数返回颜色：
```
half3 color =   diffColor * (gi.diffuse + light.color * diffuseTerm)
                + specularTerm * light.color * FresnelTerm (specColor, lh)
                + _FabricScatterColor * (nl*0.5 + 0.5) * FabricScatterFresnelLerp(nv, _FabricScatterScale);
```


### 结果1
![这里写图片描述](/img/in-post/fabric/5.jpg)
<center>标准PBR和自定义实现的天鹅绒效果对比</center>

### 结果2
![这里写图片描述](/img/in-post/fabric/cloth.jpg)
<center>自定义实现的棉布、天鹅绒和丝绸效果</center>

### 附
完整FABRIC_BRDF_PBS代码：
```
#if _FABRIC
inline float FabricD (float NdotH, float roughness)
{
    return 0.96 * pow(1 - NdotH, 2) + 0.057; 
}

inline half FabricScatterFresnelLerp(half nv, half scale)
{
    half t0 = Pow4 (1 - nv); 
    half t1 = 0.4 * (1 - nv);
    return (t1 - t0) * scale + t0;
}

half4 FABRIC_BRDF_PBS (half3 diffColor, half3 specColor, half oneMinusReflectivity, half smoothness,
    float3 normal, float3 viewDir,
    UnityLight light, UnityIndirect gi)
{
    float perceptualRoughness = SmoothnessToPerceptualRoughness (smoothness);
    float3 halfDir = Unity_SafeNormalize (float3(light.dir) + viewDir);

// NdotV should not be negative for visible pixels, but it can happen due to perspective projection and normal mapping
// In this case normal should be modified to become valid (i.e facing camera) and not cause weird artifacts.
// but this operation adds few ALU and users may not want it. Alternative is to simply take the abs of NdotV (less correct but works too).
// Following define allow to control this. Set it to 0 if ALU is critical on your platform.
// This correction is interesting for GGX with SmithJoint visibility function because artifacts are more visible in this case due to highlight edge of rough surface
// Edit: Disable this code by default for now as it is not compatible with two sided lighting used in SpeedTree.
#define UNITY_HANDLE_CORRECTLY_NEGATIVE_NDOTV 0

#if UNITY_HANDLE_CORRECTLY_NEGATIVE_NDOTV
    // The amount we shift the normal toward the view vector is defined by the dot product.
    half shiftAmount = dot(normal, viewDir);
    normal = shiftAmount < 0.0f ? normal + viewDir * (-shiftAmount + 1e-5f) : normal;
    // A re-normalization should be applied here but as the shift is small we don't do it to save ALU.
    //normal = normalize(normal);

    half nv = saturate(dot(normal, viewDir)); // TODO: this saturate should no be necessary here
#else
    half nv = abs(dot(normal, viewDir));    // This abs allow to limit artifact
#endif

    half nl = saturate(dot(normal, light.dir));
    float nh = saturate(dot(normal, halfDir));

    half lv = saturate(dot(light.dir, viewDir));
    half lh = saturate(dot(light.dir, halfDir));

    // Diffuse term
    half diffuseTerm = DisneyDiffuse(nv, nl, lh, perceptualRoughness) * nl;

    // Specular term
    // HACK: theoretically we should divide diffuseTerm by Pi and not multiply specularTerm!
    // BUT 1) that will make shader look significantly darker than Legacy ones
    // and 2) on engine side "Non-important" lights have to be divided by Pi too in cases when they are injected into ambient SH
    float roughness = PerceptualRoughnessToRoughness(perceptualRoughness);
    roughness = max(roughness, 0.002);
    half V = SmithJointGGXVisibilityTerm (nl, nv, roughness);
    float D = GGXTerm (nh, roughness);

    float VxD= roughness > 0.99 ? 1 * FabricD (nh, roughness) : V * D;

    half specularTerm = VxD * UNITY_PI; // Torrance-Sparrow model, Fresnel is applied later

#ifdef UNITY_COLORSPACE_GAMMA
    specularTerm = sqrt(max(1e-4h, specularTerm));
#endif

    // specularTerm * nl can be NaN on Metal in some cases, use max() to make sure it's a sane value
    specularTerm = max(0, specularTerm * nl);
#if defined(_SPECULARHIGHLIGHTS_OFF)
    specularTerm = 0.0;
#endif

    // surfaceReduction = Int D(NdotH) * NdotH * Id(NdotL>0) dH = 1/(roughness^2+1)
    half surfaceReduction;
#ifdef UNITY_COLORSPACE_GAMMA
        surfaceReduction = 1.0-0.28*roughness*perceptualRoughness;      // 1-0.28*x^3 as approximation for (1/(x^4+1))^(1/2.2) on the domain [0;1]
#else
        surfaceReduction = 1.0 / (roughness*roughness + 1.0);           // fade \in [0.5;1]
#endif

    // To provide true Lambert lighting, we need to be able to kill specular completely.
    specularTerm *= any(specColor) ? 1.0 : 0.0;

    half grazingTerm = saturate(smoothness + (1-oneMinusReflectivity));
    half3 color =   diffColor * (gi.diffuse + light.color * diffuseTerm)
                    + specularTerm * light.color * FresnelTerm (specColor, lh)
                    + _FabricScatterColor * (nl*0.5 + 0.5) * FabricScatterFresnelLerp(nv, _FabricScatterScale);

    return half4(color, 1);
}
#endif
```

参考文献：<br />
https://www.slideshare.net/jalnaga/custom-fabric-shader-for-unreal-engine-4 <br />
http://gennyx.blogspot.com/2009/11/its-material-world_11.html <br />
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.105.1847&rep=rep1&type=pdf  <br />
http://blog.selfshadow.com/publications/s2013-shading-course/rad/s2013_pbs_rad_notes.pdf <br />