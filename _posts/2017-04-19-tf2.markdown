---
layout:     post
title:      "Team Fortress 2 角色渲染实现"
date:       2017-04-19
author:     "ChenYong"
header-img: "img/post-bg-tf2.jpg"
tags:
    - Unity
    - Shader
    - Character
---

### Preface

TF2（中文名：军团要塞2）出自大名鼎鼎的Valve公司，是我多年前沉迷的一款美式卡通风的射击游戏，游戏出色的画面和丰富的玩法深深吸引我。

大概在2年半前，当时我正打算来成都工作，跟其中一家面试公司提起能实现TF2的卡通渲染效果，最后我没去那家公司，不过TF2的渲染实现也没去尝试。直到最近，由于新项目的卡通渲染需求，抱着借鉴参考、举一反三的想法，根据Valve公开的一些关于TF2的渲染技术文档（见参考文献），经过一周左右时间的尝试，基本还原实现了TF2的角色卡通渲染效果。

### Model Shading

TF2角色的卡通化渲染算法可概括为由视角无关（view independent）和视角相关（view dependent）两部分光照计算构成。视角无关部分由环境光加上风格化的漫反射光照构成，视角相关部分由自定义的Phong高光和边缘光（rim light）构成。上述的所有光照计算均为逐像素的光照计算，绝大部分材质属性包括法线、高光指数和遮罩等都取自贴图。

#### View Independent Lighting Terms

视角无关的光照计算公式可总结为：
![这里写图片描述](/img/in-post/tf2/formula1.jpg)

公式中的$\sum$表示多光源光照计算结果之和。

##### Half Lambert 

Lambert光照计算主要部分是$\vec{n} \cdot \vec{l}$，在卡通化的渲染中，Half Lambert可以使得模型的背光区域不会那么黑，从而细节能够保留。做法是对$\vec{n} \cdot \vec{l}$结果做缩放0.5和偏移0.5计算。对应公式1中的$\alpha$、 $\beta$和$\gamma$分别为0.5、0.5和1。

##### Diffuse Warping Function

公式1中的warping function w()的内容是使用Half Lambert值作为取渐变贴图（warping texture）的UV值。从渐变贴图取到的颜色再去做光照计算。渐变贴图由美术人员去制作，这样可风格化模型光照表现，比如自定义渐变贴图左半边的颜色可使得模型背光区域多一些冷色调而不是纯灰度色。下面是本文试验用到的渐变贴图：
![这里写图片描述](/img/in-post/tf2/pyro_lightwarp.png)
应用到角色模型上的光照表现见图6b。

##### Directional Ambient Term

a($\vec{n}$)，渲染文献指的是“ambient cube”，在Unity中可通过ShadeSH9（normal）取到，前提是场景中设置了天空盒材质。结果见图6c。

视角无关部分之和6d与颜色贴图6a相乘，得到结果见6e。

#### View Dependent Lighting Terms

视角相关的光照计算公式可总结为：
![这里写图片描述](/img/in-post/tf2/formula2.jpg)

##### Multiple Phong Terms

常规的Phong光照计算主要部分是$(\vec{v} \cdot \vec{r})^{k_{spec}}$。

在Valve官方对Phong材质参数的解释中，$k_{spec}$取自贴图，并线性映射到[0, 150]用于做高光指数。$f_{s}$在材质中的标识为phongfresnelranges "[n n n]"分别表示视角与法线平行、成夹角、垂直3种情况对应的fresnel强度，是一种“artist-tuned”的 Fresnel实现。“正统”的fresnel的实现为$f_{r}$=$(1-(\vec{n} \cdot \vec{v}))^4$。$k_{r}$是rim的遮罩贴图，$k_{rim}$是个常量。TF2中$k_{rim}$设置远小于$k_{spec}$。最后用max()取两个Phong计算的最大值。乘上灯光$c_{i}$和高光遮罩$k_{s}$结果见图6f。

##### Dedicated Rim Lighting 

公式2的+号右边公式用于添加头顶边缘光。参考文献中提到这是一种“aesthetic”的选择：人直观感觉有光来自头顶上方。计算公式中的$\vec{u}$为vec(0, 1, 0)，a($\vec{v}$)暂用环境光常量表示。结果见图6g。

视角相关关部分之和结果见6h。

### Shader代码

```
Shader "Kingsoft/Character/CharacterTF2" {
    Properties {
        _Color("Color", Color) = (1,1,1,1)
        _MainTex("MainTex", 2D) = "white" {}
        _ToonTex("ToonTex", 2D) = "white" {}
        _BumpMap("Normal Map", 2D) = "white" {}
        _SpecMask("SpecularMask", 2D) = "white" {}
        _ExponentTex("ExponentTex", 2D) = "white" {}
        _RimExponent("RimExponent", Range(0, 10)) = 4
    }

    SubShader {
        Tags {
            "RenderType"="Opaque"
        }

        Pass {
            Name "ForwardBase"

            Tags {
                "LightMode"="ForwardBase"
            }

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #define UNITY_PASS_FORWARDBASE
            #define SHOULD_SAMPLE_SH_PROBE ( defined (LIGHTMAP_OFF) )
            #include "UnityCG.cginc"
            #include "AutoLight.cginc"
            #pragma exclude_renderers xbox360 ps3 flash d3d11_9x 
            #pragma target 3.0
            #pragma glsl
            
            half4 _LightColor0;
            half4 _Color;
            sampler2D _MainTex;
            sampler2D _ToonTex;
            sampler2D _BumpMap;
            sampler2D _SpecMask;
            sampler2D _ExponentTex;

            fixed _RimExponent;

            struct VertexInput {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float2 texcoord0 : TEXCOORD0;
            };
            struct VertexOutput {
                float4 pos : SV_POSITION;
                float2 uv0 : TEXCOORD0;
                float4 posWorld : TEXCOORD1;
                float3 normalDir : TEXCOORD2;
                float3 tangentDir : TEXCOORD3;
                float3 binormalDir : TEXCOORD4;
                float3 globalAmbient : TEXCOORD5;
                LIGHTING_COORDS(6, 7)
            };

            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;
                o.uv0 = v.texcoord0;
                o.normalDir = mul(unity_ObjectToWorld, float4(v.normal,0)).xyz;
                o.tangentDir = normalize( mul( unity_ObjectToWorld, float4( v.tangent.xyz, 0.0 ) ).xyz );
                o.binormalDir = normalize(cross(o.normalDir, o.tangentDir) * v.tangent.w);
                o.posWorld = mul(unity_ObjectToWorld, v.vertex);
                float3 lightColor = _LightColor0.rgb;
                o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
                o.globalAmbient = ShadeSH9(float4(o.normalDir, 1.0));

                TRANSFER_VERTEX_TO_FRAGMENT(o)
                return o;
            }
            fixed4 frag(VertexOutput i) : COLOR {
                float3x3 tangentTransform = float3x3( i.tangentDir, i.binormalDir, i.normalDir);
/////// Vectors:
                float3 viewDirection = normalize(_WorldSpaceCameraPos.xyz - i.posWorld.xyz);
                float3 normalDirection = normalize(i.normalDir);
                                
                float3 normalTangent = UnpackNormal(tex2D(_BumpMap, i.uv0));
                normalDirection = normalize(i.tangentDir * normalTangent.x + i.binormalDir * normalTangent.y + i.normalDir * normalTangent.z);              

                float3 lightDirection = normalize(_WorldSpaceLightPos0.xyz);
                float3 lightReflectDirection = reflect(-lightDirection, normalDirection);
                
                float3 lightColor = _LightColor0.rgb;
                float3 halfDirection = normalize(viewDirection+lightDirection);
                float NdotL = dot(normalize(i.normalDir), lightDirection); // use original normal
                float NdotV = dot(normalDirection, viewDirection);

/////// View Independent Lighting Terms

                // Half Lambert
                NdotL = pow(NdotL*0.5 + 0.5, 1);

                // Diffuse Warping Function
                fixed3 ramp = tex2D(_ToonTex, half2(NdotL, NdotL)).rgb;

                // Directional Ambient Term
                fixed3 ambient = i.globalAmbient;

                fixed4 albedo = tex2D(_MainTex, i.uv0) * _Color;

                fixed3 _6a = albedo.rgb;
                fixed3 _6b = ramp;
                fixed3 _6c = ambient;
                fixed3 _6d = _6b*lightColor + _6c;
                fixed3 _6e = _6a * _6d;

/////// View Dependent Lighting Terms

                // Multiple Phong Terms
                fixed4 exponentTex = tex2D(_ExponentTex, i.uv0);                
                
                fixed kspec = lerp(1, 150, exponentTex.r); // specular exponent
                fixed ks = tex2D(_SpecMask, i.uv0).r; // specular mask
                fixed fs = lerp(0.3, 1, 1 - NdotV);
                fixed spec1 = pow(max(0, dot(viewDirection, lightReflectDirection)), kspec);

                fixed krim = _RimExponent; // rim exponent
                fixed kr = exponentTex.a; // rim mask
                fixed fr = pow(1 - max(0, dot(normalDirection, viewDirection)), 4);
                fixed spec2 = pow(max(0, dot(viewDirection, lightReflectDirection)), krim);

                fixed spec = max(fs*spec1, fr*kr*spec2);

                // Dedicated Rim Lighting
                fixed drim = fr*dot(normalDirection, fixed3(0, 1, 0));

                fixed3 _6f = spec*ks*lightColor;
                fixed3 _6g = drim*kr*0.5;
                fixed3 _6h = _6f + _6g;

                // Final result
                fixed3 _6j = _6e + _6h;

                return fixed4(_6j, 1);
            }
            ENDCG
        }
    }
    FallBack "Diffuse"
}

```

### Result

![这里写图片描述](/img/in-post/tf2/a+b.jpg)
![这里写图片描述](/img/in-post/tf2/c+d.jpg)
![这里写图片描述](/img/in-post/tf2/e+f.jpg)
![这里写图片描述](/img/in-post/tf2/g+h.jpg)
![这里写图片描述](/img/in-post/tf2/6j.jpg)

参考文献：

http://www.valvesoftware.com/publications/2007/NPAR07_IllustrativeRenderingInTeamFortress2.pdf

http://www.valvesoftware.com/publications/2008/GDC2008_StylizationWithAPurpose_TF2.pdf

https://developer.valvesoftware.com/wiki/Phong_materials

http://gamebanana.com/tuts/5440