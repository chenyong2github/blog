---
layout:     post
title:      "BRDF模糊环境光照的简单实现"
date:       2016-07-28
author:     "ChenYong"
header-img: "img/post-bg-brdf.jpg"
tags:
    - Unity
    - Graphics
    - 原创
---

### 1. 介绍 
基于物理的渲染系统用双向反射分布函数(BRDF)来描述物体表面的反射表现。BRDF考虑物体表面各个方向的入射光（环境光）而不是仅仅计算某单一方向的入射光。近年的大量相关研究投入到如何实现环境光照效果与硬件渲染相结合。然而，其大部分的实现过于复杂，而且对硬件的要求过高。另一方面，众所周知，在BRDF实现的主要特性中，环境光照效果并不要求严格的计算的精确性。

所以，后来发展出大量的近似处理技巧来得到可以接受的近似环境光照效果。本文中，我们将介绍一种非常简单的利用已有功能的实现方式。

### 2. 技巧
环境光贴图(EM)可能是目前模拟环境光照的最简单的方式了。它仅仅是由一些预计算的光照贴图组成。目前最普及的是立方体环境光贴图。预模糊的环境光贴图可以很好的模拟对精确性要求不高的模糊环境光照效果，而且如果环境光贴图用mipmap格式存储，那不同的mipmap级别就代表了不同精度的贴图信息，可以直接拿来用。通过控制环境光贴图的LOD(level of detail)来近似实现物体表面高亮到模糊的表面反射效果。

### 3. 结果 
图中所示的是不同环境光照贴图LOD值的茶壶，左上角为原始贴图，后面LOD值依次变大，很好的表现出茶壶表面的光泽度在依次变低的效果。
![这里写图片描述](/img/in-post/misc/1.jpg)

### 4. 附
结合上述原理实现的不同光滑程度房间地面效果：
![这里写图片描述](/img/in-post/misc/2.jpg)

shader代码：
```
Shader "Scene/Floor" 
{
	Properties{
		_Color("Main Color", Color) = (1,1,1,1)
		_MainTex("Base (RGB)", 2D) = "white" {}
		_Detail("Noise", 2D) = "bump" {}
		_DetailScale("Noise Scale", Range(0, 1)) = 1.0
		_Intensity("Intenisty", Range(0, 10)) = 1
		_LOD("Blur", Range(0, 4)) = 0
		_Emission("Emission (Lightmapper)", Float) = 1.0
	}

	SubShader{
		Tags{ "RenderType" = "Opaque" }
		LOD 300

		CGPROGRAM
		#pragma surface surf Floor
		#pragma target 3.0

		inline fixed4 LightingFloor(SurfaceOutput s, UnityGI gi)
		{
			fixed diff = max(0, dot(s.Normal, gi.light.dir));

			fixed4 c;
			c.rgb = s.Albedo * gi.light.color * diff;
			c.a = s.Alpha;

			#if defined(DIRLIGHTMAP_SEPARATE)
				#ifdef LIGHTMAP_ON
					c += UnityLambertLight (s, gi.light2);
				#endif
				#ifdef DYNAMICLIGHTMAP_ON
					c += UnityLambertLight (s, gi.light3);
				#endif
			#endif

			#ifdef UNITY_LIGHT_FUNCTION_APPLY_INDIRECT
				c.rgb += s.Albedo * gi.indirect.diffuse;
			#endif

			return c;
		}

		inline void LightingFloor_GI(
			SurfaceOutput s,
			UnityGIInput data,
			inout UnityGI gi)
		{
			gi = UnityGlobalIllumination(data, 1.0, s.Normal);
		}

		sampler2D _MainTex;
		sampler2D _Detail;
		fixed _DetailScale;
		fixed _Intensity;
		fixed _LOD;
		fixed4 _Color;
		fixed _Emission;

		uniform sampler2D _ReflectionTex;
		uniform half _ReflectionRange;

		struct Input {
			float2 uv_MainTex;
			float2 uv_Detail;
			float4 screenPos;
		};

		void surf(Input IN, inout SurfaceOutput o) {
			fixed4 tex = tex2D(_MainTex, IN.uv_MainTex);
			fixed4 c = tex * _Color;

			fixed3 noise = UnpackNormal(tex2D(_Detail, IN.uv_Detail));
			float2 screenUV = IN.screenPos.xy / IN.screenPos.w + noise.xy * _DetailScale;
			half4 uv = half4(screenUV, 0, _LOD);
			half4 rtRefl = tex2Dlod(_ReflectionTex, uv);

			o.Albedo = c.rgb + _ReflectionRange * _Intensity * rtRefl;

			o.Emission = c.rgb;
	#if defined (UNITY_PASS_META)
			o.Emission *= _Emission.rrr;
	#endif
			o.Alpha = c.a;
		}
		ENDCG 
	}
	FallBack "Legacy Shaders/Self-Illumin/VertexLit"
	CustomEditor "LegacyIlluminShaderGUI"
}

```

参考文章：<br />
http://www.cs.ubc.ca/~ghosh/Publications/blurry.pdf
https://en.wikipedia.org/wiki/Reflection_mapping
